<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1421682002471">{:repl-history {:ide [], :local [&quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;\&quot;)\n         #_(env :database-url \&quot;//127.0.0.1:3306/u1st_games\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4ME!\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;us-cdbr-iron-east-01.cleardb.net/heroku_0d8d6db9ab5a958?reconnect=true\n\&quot;)\n         #_(env :database-url \&quot;//127.0.0.1:3306/u1st_games\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4ME!\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;//us-cdbr-iron-east-01.cleardb.net/heroku_0d8d6db9ab5a958?reconnect=true\n\&quot;)\n         #_(env :database-url \&quot;//127.0.0.1:3306/u1st_games\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4ME!\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;//b6d6130c336e91:ae478ccd@us-cdbr-iron-east-01.cleardb.net/heroku_0d8d6db9ab5a958?reconnect=true\n\&quot;)\n         #_(env :database-url \&quot;//127.0.0.1:3306/u1st_games\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4ME!\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;//us-cdbr-iron-east-01.cleardb.net/heroku_0d8d6db9ab5a958?reconnect=true\n\&quot;)\n         #_(env :database-url \&quot;//127.0.0.1:3306/u1st_games\&quot;)\n         :user \&quot;b6d6130c336e91\&quot;\n         :password \&quot;ae478ccd\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;//127.0.0.1:3306/u1st_games\&quot;)\n         :user (env :db-user \&quot;root\&quot;)\n         :password (env :db-password \&quot;1fishy4ME!\&quot;) })&quot; &quot;(-main)&quot; &quot;(server)&quot; &quot;(:require 'clojure-getting-started.web)&quot; &quot;(defn splash []\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/plain\&quot;}\n   :body (pr-str [\&quot;Hello\&quot; :from 'Heroku])})&quot; &quot;(defn splash []\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/plain\&quot;}\n   :body (pr-str [\&quot;Hello thre\&quot; :from 'Heroku])})&quot; &quot;(defroutes app\n  (GET \&quot;/\&quot; []\n       (splash))\n  (ANY \&quot;*\&quot; []\n       (route/not-found (slurp (io/resource \&quot;404.html\&quot;)))))&quot; &quot;(defn splash []\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/plain\&quot;}\n   :body (pr-str [\&quot;Hello there old chap\&quot; :from 'Heroku])})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname \&quot;//127.0.0.1:3306/u1st_games\&quot;\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(appinfo 23423432)&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname \&quot;//173.230.153.62/u1st_games\&quot;\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(appInfo 2343233443)&quot; &quot;(appInfo 175115139210950 )&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname \&quot;//173.230.153.62/db/u1st_games\&quot;\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname \&quot;//104.237.130.127/db/u1st_games\&quot;\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname \&quot;//104.237.130.127:3500/db/u1st_games\&quot;\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname \&quot;//104.237.130.127:3500\&quot;\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(appInfo 175115139210950)&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname \&quot;//104.237.130.127:3500/\&quot;\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(ns modern-cljs.core\n  (:use compojure.core)\n  (:use ring.middleware.edn)\n  (:require [compojure.handler :as handler]\n            [hiccup.page :as page]\n            [handlers.gbc :as gbchandler]\n            [handlers.click :as clickhandler]\n            [handlers.link :as linkhandler]\n            [handlers.feed :as feedhandler]\n            [handlers.yt :as ythandler]\n            [model.local :as m]\n            [compojure.route :as route]\n            [model.local :as local]\n             :reload))&quot; &quot;(defn generate-response  [data &amp;  [status]]\n    {:status  (or status 200)\n        :headers  {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n        :body  (pr-str data)})&quot; &quot;(defroutes app-routes\n  ; to serve document root address\n  (GET \&quot;/gbc/:appid/\&quot; [appid] (gbchandler/init appid))\n  (POST \&quot;/gbc/:appid/\&quot; [appid] (gbchandler/init appid))\n  (GET \&quot;/gbc/facebook/:appid/\&quot; [appid] (gbchandler/init appid true))\n  (POST \&quot;/gbc/facebook/:appid/\&quot; [appid] (gbchandler/init appid true))\n  (GET \&quot;/click/:appid/\&quot; [appid] (clickhandler/init appid))\n  (POST \&quot;/click/:appid/\&quot; [appid] (clickhandler/init appid))\n  (GET \&quot;/click/facebook/:appid/\&quot; [appid] (clickhandler/init appid true))\n  (POST \&quot;/click/facebook/:appid/\&quot; [appid] (clickhandler/init appid true))\n  (GET \&quot;/gbc/facebook/:appid/\&quot; [appid] (gbchandler/init appid true))\n  (POST \&quot;/gbc/facebook/:appid/\&quot; [appid] (gbchandler/init appid true))\n  (GET \&quot;/linkexchange/:appid/\&quot; [appid] (linkhandler/init appid))\n  (GET \&quot;/gbc/feedfilter/\&quot; [] (feedhandler/init))\n\n  ;Gimme some o dat aaaaaaaajax\n  (GET \&quot;/latestLinks/:appid/\&quot; [appid] (generate-response (local/latestLinks appid 100)))\n  (POST \&quot;/latestLinks/:appid/\&quot; [appid] (generate-response (local/latestLinks appid 100)))\n  (PUT \&quot;/insertBonuses/\&quot; [bonuses] (generate-response (local/addBonuses bonuses)))\n  (PUT \&quot;/insertNewApplication/\&quot; [gameInfo] (generate-response (local/addNewApplication gameInfo)))\n  (GET \&quot;/gbcids/\&quot; [] (generate-response (m/allBonusCollectors)))\n  (GET \&quot;/gameids/\&quot; [] (generate-response (m/allGameIds)))\n  (GET \&quot;/applicationids/\&quot; [] (generate-response (m/allApplicationIds)))\n\n  (GET \&quot;/allClickxLinks/:appid/\&quot; [appid] (generate-response (local/allClickxLinks appid )))\n  (POST \&quot;/allClickxLinks/:appid/\&quot; [appid] (generate-response (local/allClickxLinks appid )))\n  (PUT \&quot;/addClickxLink/\&quot; [linkMap] (generate-response (local/addClickxLink linkMap)))\n  (PUT \&quot;/addClickxBonus/\&quot; [bonusMap] (generate-response (local/addClickxBonus bonusMap)))\n  (PUT \&quot;/clickUpdate/\&quot; [link] (generate-response (local/clickUpdate link)))\n\n  ; to server static pages saved in resources/public directory\n  (route/resources \&quot;/\&quot;)\n  ; if page is not found\n  (route/not-found \&quot;Page not found\&quot;))&quot; &quot;(def handler\n(handler/site (-&gt; app-routes wrap-edn-params)))&quot; &quot;(ns clojure-getting-started.web\n  (:require [compojure.core :refer [defroutes GET PUT POST DELETE ANY]]\n            [compojure.handler :refer [site]]\n            [compojure.route :as route]\n            [clojure.java.io :as io]\n            [ring.adapter.jetty :as jetty]\n            [environ.core :refer [env]]))&quot; &quot;(defn splash []\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/plain\&quot;}\n   :body (pr-str [\&quot;Hello there old chap yea boi\&quot; :from 'Heroku])})&quot; &quot;(defn -main [&amp; [port]]\n  (let [port (Integer. (or port (env :port) 5000))]\n    (jetty/run-jetty (site #'app) {:port port :join? false})))&quot; &quot;(ns clojure-getting-started.web\n  #_(:require [compojure.core :refer [defroutes GET PUT POST DELETE ANY]]\n            [compojure.handler :refer [site]]\n            [compojure.route :as route]\n            [clojure.java.io :as io]\n            [ring.adapter.jetty :as jetty]\n            [environ.core :refer [env]])\n  (:use compojure.core)\n  (:use ring.middleware.edn)\n  (:require [compojure.handler :as handler]\n    [hiccup.page :as page]\n    [handlers.gbc :as gbchandler]\n    [handlers.click :as clickhandler]\n    [handlers.link :as linkhandler]\n    [handlers.feed :as feedhandler]\n    [handlers.yt :as ythandler]\n    [model.local :as m]\n    [compojure.route :as route]\n    [model.local :as local]\n    :reload)\n  )&quot; &quot;(defn generate-response  [data &amp;  [status]]\n      {:status  (or status 200)\n       :headers  {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n       :body  (pr-str data)})&quot; &quot;(defroutes app-routes\n           ; to serve document root address\n           (GET \&quot;/gbc/:appid/\&quot; [appid] (gbchandler/init appid))\n           (POST \&quot;/gbc/:appid/\&quot; [appid] (gbchandler/init appid))\n           (GET \&quot;/gbc/facebook/:appid/\&quot; [appid] (gbchandler/init appid true))\n           (POST \&quot;/gbc/facebook/:appid/\&quot; [appid] (gbchandler/init appid true))\n           (GET \&quot;/click/:appid/\&quot; [appid] (clickhandler/init appid))\n           (POST \&quot;/click/:appid/\&quot; [appid] (clickhandler/init appid))\n           (GET \&quot;/click/facebook/:appid/\&quot; [appid] (clickhandler/init appid true))\n           (POST \&quot;/click/facebook/:appid/\&quot; [appid] (clickhandler/init appid true))\n           (GET \&quot;/gbc/facebook/:appid/\&quot; [appid] (gbchandler/init appid true))\n           (POST \&quot;/gbc/facebook/:appid/\&quot; [appid] (gbchandler/init appid true))\n           (GET \&quot;/linkexchange/:appid/\&quot; [appid] (linkhandler/init appid))\n           (GET \&quot;/gbc/feedfilter/\&quot; [] (feedhandler/init))\n\n           ;Gimme some o dat aaaaaaaajax\n           (GET \&quot;/latestLinks/:appid/\&quot; [appid] (generate-response (local/latestLinks appid 100)))\n           (POST \&quot;/latestLinks/:appid/\&quot; [appid] (generate-response (local/latestLinks appid 100)))\n           (PUT \&quot;/insertBonuses/\&quot; [bonuses] (generate-response (local/addBonuses bonuses)))\n           (PUT \&quot;/insertNewApplication/\&quot; [gameInfo] (generate-response (local/addNewApplication gameInfo)))\n           (GET \&quot;/gbcids/\&quot; [] (generate-response (m/allBonusCollectors)))\n           (GET \&quot;/gameids/\&quot; [] (generate-response (m/allGameIds)))\n           (GET \&quot;/applicationids/\&quot; [] (generate-response (m/allApplicationIds)))\n\n           (GET \&quot;/allClickxLinks/:appid/\&quot; [appid] (generate-response (local/allClickxLinks appid )))\n           (POST \&quot;/allClickxLinks/:appid/\&quot; [appid] (generate-response (local/allClickxLinks appid )))\n           (PUT \&quot;/addClickxLink/\&quot; [linkMap] (generate-response (local/addClickxLink linkMap)))\n           (PUT \&quot;/addClickxBonus/\&quot; [bonusMap] (generate-response (local/addClickxBonus bonusMap)))\n           (PUT \&quot;/clickUpdate/\&quot; [link] (generate-response (local/clickUpdate link)))\n\n           ; to server static pages saved in resources/public directory\n           (route/resources \&quot;/\&quot;)\n           ; if page is not found\n           (route/not-found \&quot;Page not found\&quot;))&quot; &quot;(def handler\n  (handler/site (-&gt; app-routes wrap-edn-params)))&quot; &quot;(defn -main [&amp; [port]]\n  (let [port (Integer. (or port (env :port) 5000))]\n    (jetty/run-jetty (site #'handler) {:port port :join? false})))&quot; &quot;(env )&quot; &quot;(env :sample)&quot; &quot;(env :database_url)&quot; &quot;(env :database-url)&quot; &quot;(ns clojure-getting-started.web\n  #_(:require [compojure.core :refer [defroutes GET PUT POST DELETE ANY]]\n            [compojure.handler :refer [site]]\n            [compojure.route :as route]\n            [clojure.java.io :as io]\n            [ring.adapter.jetty :as jetty]\n            [environ.core :refer [env]])\n  (:use compojure.core)\n  (:use ring.middleware.edn)\n  (:require [compojure.handler :as handler]\n    [hiccup.page :as page]\n    [handlers.gbc :as gbchandler]\n    [handlers.click :as clickhandler]\n    [handlers.link :as linkhandler]\n    [handlers.feed :as feedhandler]\n    [handlers.yt :as ythandler]\n    [model.local :as m]\n    [compojure.route :as route]\n    [model.local :as local]\n    [environ.core :refer [env]]\n    :reload)\n  )&quot; &quot;(env :cleardb-database-url)&quot; &quot;(def sample (env :cleardb-database-url ))&quot; &quot;(sample)&quot; &quot;(env :cleardb-database-url \&quot;default\&quot;)&quot; &quot;(def sample (env :cleardb-database-url \&quot;default\&quot;))&quot; &quot;sample&quot; &quot;(ns model.local (:require [views.click :as views]))&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname \&quot;//127.0.0.1:3306/\&quot;\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;http://127.0.0.1:3306\&quot;) \n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname ((env :database-url \&quot;http://127.0.0.1:3306\&quot;))  \n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;http://127.0.0.1:3306\&quot;)  \n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(env :database-url \&quot;http://127.0.0.1:3306\&quot;)&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;http://127.0.0.1:3306\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4ME!\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;http://127.0.0.1:3306\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;http://localhost:3306/u1st_games\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;http://127.0.0.1:3306/u1st_games\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url) \&quot;http://127.0.0.1:3306/u1st_games\&quot;\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(ns model.local (:require [views.click :as views]\n                          [environ.core :refer [env]]\n                          ))&quot; &quot;(use '[clojure.string :only (split)])&quot; &quot;(use '[clojure.algo.generic.functor :only  (fmap)])&quot; &quot;(require '[clojure.java.jdbc :as sql])&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url  \&quot;http://127.0.0.1:3306/u1st_games\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4me\&quot;})&quot; &quot;(ns model.local (:require [views.click :as views]\n                          [environ.core :refer [env]]\n                          [clojure.java.jdbc :as sql]\n                          ))&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url  \&quot;//127.0.0.1:3306/u1st_games\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4ME!\&quot;})&quot; &quot;(defn appInfo [appid]\n  (nth (sql/query db [(str \&quot;SELECT gameid,gamename,gbcid from games where gbcid=\&quot; appid)]) 0))&quot; &quot;(appInfo 102452128776)&quot; &quot;(sql/query db [(str \&quot;SELECT gameid,gamename,gbcid from games where gbcid=102452128776\&quot;)])&quot; &quot;(sql/query db [(str \&quot;SELECT gameid,gamename,gbcid from games where gbcid=144726275680600\&quot;)])&quot; &quot;(defn appInfoClickx [appid]\n  (nth (sql/query db [(str \&quot;SELECT gameid,gamename,clickxid,canvasname from games where clickxid=\&quot; appid)]) 0))&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;http://127.0.0.1:3306/u1st_games\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4ME!\&quot;})&quot; &quot;(def db {:subprotocol \&quot;mysql\&quot;\n         :subname (env :database-url \&quot;//127.0.0.1:3306/u1st_games\&quot;)\n         :user \&quot;root\&quot;\n         :password \&quot;1fishy4ME!\&quot;})&quot; &quot;(appInfo 144726275680600)&quot; &quot;(def server (-main))&quot;], :remote []}}</component>
</project>